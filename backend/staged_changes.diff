diff --git a/backend/package-lock.json b/backend/package-lock.json
index af4319d..6d2f01b 100644
--- a/backend/package-lock.json
+++ b/backend/package-lock.json
@@ -7,6 +7,7 @@
     "": {
       "name": "api.jwt-authentication",
       "version": "0.0.1",
+      "hasInstallScript": true,
       "license": "UNLICENSED",
       "dependencies": {
         "@aws-sdk/client-s3": "^3.705.0",
diff --git a/backend/package.json b/backend/package.json
index 7e15491..fde803d 100644
--- a/backend/package.json
+++ b/backend/package.json
@@ -17,7 +17,8 @@
     "test:watch": "jest --watch",
     "test:cov": "jest --coverage",
     "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
-    "test:e2e": "jest --config ./test/jest-e2e.json"
+    "test:e2e": "jest --config ./test/jest-e2e.json",
+    "install": "bash ./scripts/replaceResourceSchema.sh"
   },
   "dependencies": {
     "@aws-sdk/client-s3": "^3.705.0",
diff --git a/backend/schematics/resource/files/ts/__name__.controller.ts b/backend/schematics/resource/files/ts/__name__.controller.ts
new file mode 100644
index 0000000..6c7a46e
--- /dev/null
+++ b/backend/schematics/resource/files/ts/__name__.controller.ts
@@ -0,0 +1,49 @@
+import {
+  Body,
+  Controller,
+  Delete,
+  Get,
+  Param,
+  Patch,
+  Post,
+  Req,
+  UseGuards,
+} from '@nestjs/common';
+import { AuthGuard } from 'src/auth/auth.guard';
+import { <%= classify(name) %>Service } from './<%= dasherize(name) %>.service';
+import { <%= classify(name) %> } from './entities/<%= dasherize(name) %>.entity';
+
+@UseGuards(AuthGuard)
+@Controller('<%= dasherize(name) %>')
+export class <%= classify(name) %>Controller {
+  constructor(private readonly <%= camelize(name) %>Service: <%= classify(name) %>Service) {}
+
+  @Post()
+  create(@Req() req: any, @Body() <%= camelize(name) %>: Partial<<%= classify(name) %>>) {
+    return this.<%= camelize(name) %>Service.create(req, <%= camelize(name) %>);
+  }
+
+  @Get()
+  findAll(@Req() req: any) {
+    return this.<%= camelize(name) %>Service.findAll(req);
+  }
+
+  @Get(':id')
+  findOne(@Req() req: any, @Param('id') id: string) {
+    return this.<%= camelize(name) %>Service.findOne(req, id);
+  }
+
+  @Patch(':id')
+  update(
+    @Req() req: any,
+    @Param('id') id: string,
+    @Body() updated<%= classify(name) %>: Partial<<%= classify(name) %>>,
+  ) {
+    return this.<%= camelize(name) %>Service.update(req, id, updated<%= classify(name) %>);
+  }
+
+  @Delete(':id')
+  remove(@Req() req: any, @Param('id') id: string) {
+    return this.<%= camelize(name) %>Service.remove(req, id);
+  }
+}
diff --git a/backend/schematics/resource/files/ts/__name__.module.ts b/backend/schematics/resource/files/ts/__name__.module.ts
new file mode 100644
index 0000000..540af8f
--- /dev/null
+++ b/backend/schematics/resource/files/ts/__name__.module.ts
@@ -0,0 +1,18 @@
+import { forwardRef, Module } from '@nestjs/common';
+import { TypeOrmModule } from '@nestjs/typeorm';
+import { AuthModule } from 'src/auth/auth.module';
+import { UserModule } from 'src/user/user.module';
+import { <%= classify(name) %>Controller } from './<%= dasherize(name) %>.controller';
+import { <%= classify(name) %>Service } from './<%= dasherize(name) %>.service';
+import { <%= classify(name) %> } from './entities/<%= dasherize(name) %>.entity';
+
+@Module({
+  imports: [
+    TypeOrmModule.forFeature([<%= classify(name) %>]),
+    forwardRef(() => AuthModule),
+    forwardRef(() => UserModule),
+  ],
+  controllers: [<%= classify(name) %>Controller],
+  providers: [<%= classify(name) %>Service],
+})
+export class <%= classify(name) %>Module {}
diff --git a/backend/schematics/resource/files/ts/__name__.service.ts b/backend/schematics/resource/files/ts/__name__.service.ts
new file mode 100644
index 0000000..c85cc9d
--- /dev/null
+++ b/backend/schematics/resource/files/ts/__name__.service.ts
@@ -0,0 +1,25 @@
+import { Injectable } from '@nestjs/common';
+import { <%= classify(name) %> } from './entities/<%= dasherize(name) %>.entity';
+
+@Injectable()
+export class <%= classify(name) %>Service {
+  create(req: any, <%= camelize(name) %>: Partial<<%= classify(name) %>>) {
+    return 'This action adds a new <%= dasherize(name) %>';
+  }
+
+  findAll(req: any) {
+    return `This action returns all <%= dasherize(name) %>s`;
+  }
+
+  findOne(req: any, id: string) {
+    return `This action returns a #${id} <%= dasherize(name) %>`;
+  }
+
+  update(req: any, id: string, updated<%= classify(name) %>: Partial<<%= classify(name) %>>) {
+    return `This action updates a #${id} <%= dasherize(name) %>`;
+  }
+
+  remove(req: any, id: string) {
+    return `This action removes a #${id} <%= dasherize(name) %>`;
+  }
+}
diff --git a/backend/schematics/resource/files/ts/entities/__name@singular@ent__.ts b/backend/schematics/resource/files/ts/entities/__name@singular@ent__.ts
new file mode 100644
index 0000000..1600607
--- /dev/null
+++ b/backend/schematics/resource/files/ts/entities/__name@singular@ent__.ts
@@ -0,0 +1,13 @@
+import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';
+
+@Entity()
+export class <%= classify(name) %> {
+  @PrimaryGeneratedColumn('uuid')
+  id: string;
+
+  @Column({ unique: true })
+  name: string;
+
+  @Column()
+  description: string;
+}
diff --git a/backend/schematics/resource/replaced.txt b/backend/schematics/resource/replaced.txt
new file mode 100644
index 0000000..97c8d26
--- /dev/null
+++ b/backend/schematics/resource/replaced.txt
@@ -0,0 +1 @@
+The schematic file was replaced to my needs.
\ No newline at end of file
diff --git a/backend/schematics/resource/resource.factory.d.ts b/backend/schematics/resource/resource.factory.d.ts
new file mode 100644
index 0000000..ade6e13
--- /dev/null
+++ b/backend/schematics/resource/resource.factory.d.ts
@@ -0,0 +1,3 @@
+import { Rule } from '@angular-devkit/schematics';
+import { ResourceOptions } from './resource.schema';
+export declare function main(options: ResourceOptions): Rule;
diff --git a/backend/schematics/resource/resource.factory.js b/backend/schematics/resource/resource.factory.js
new file mode 100644
index 0000000..ad2dc73
--- /dev/null
+++ b/backend/schematics/resource/resource.factory.js
@@ -0,0 +1,144 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.main = main;
+const core_1 = require("@angular-devkit/core");
+const strings_1 = require("@angular-devkit/core/src/utils/strings");
+const schematics_1 = require("@angular-devkit/schematics");
+const tasks_1 = require("@angular-devkit/schematics/tasks");
+const pluralize = require("pluralize");
+const __1 = require("../..");
+const dependencies_utils_1 = require("../../utils/dependencies.utils");
+const formatting_1 = require("../../utils/formatting");
+const name_parser_1 = require("../../utils/name.parser");
+const source_root_helpers_1 = require("../../utils/source-root.helpers");
+function main(options) {
+    options = transform(options);
+    return (tree, context) => {
+        return (0, schematics_1.branchAndMerge)((0, schematics_1.chain)([
+            addMappedTypesDependencyIfApplies(options),
+            (0, source_root_helpers_1.mergeSourceRoot)(options),
+            addDeclarationToModule(options),
+            (0, schematics_1.mergeWith)(generate(options)),
+        ]))(tree, context);
+    };
+}
+function transform(options) {
+    const target = Object.assign({}, options);
+    if (!target.name) {
+        throw new schematics_1.SchematicsException('Option (name) is required.');
+    }
+    target.metadata = 'imports';
+    const location = new name_parser_1.NameParser().parse(target);
+    target.name = (0, formatting_1.normalizeToKebabOrSnakeCase)(location.name);
+    target.path = (0, formatting_1.normalizeToKebabOrSnakeCase)(location.path);
+    target.language = target.language !== undefined ? target.language : 'ts';
+    if (target.language === 'js') {
+        throw new Error('The "resource" schematic does not support JavaScript language (only TypeScript is supported).');
+    }
+    target.specFileSuffix = (0, formatting_1.normalizeToKebabOrSnakeCase)(options.specFileSuffix || 'spec');
+    target.path = target.flat
+        ? target.path
+        : (0, core_1.join)(target.path, target.name);
+    target.isSwaggerInstalled = options.isSwaggerInstalled ?? false;
+    return target;
+}
+function generate(options) {
+    return (context) => (0, schematics_1.apply)((0, schematics_1.url)((0, core_1.join)('./files', options.language)), [
+        (0, schematics_1.filter)((path) => {
+            if (path.endsWith('.dto.ts')) {
+                return (options.type !== 'graphql-code-first' &&
+                    options.type !== 'graphql-schema-first' &&
+                    options.crud);
+            }
+            if (path.endsWith('.input.ts')) {
+                return ((options.type === 'graphql-code-first' ||
+                    options.type === 'graphql-schema-first') &&
+                    options.crud);
+            }
+            if (path.endsWith('.resolver.ts') ||
+                path.endsWith('.resolver.__specFileSuffix__.ts')) {
+                return (options.type === 'graphql-code-first' ||
+                    options.type === 'graphql-schema-first');
+            }
+            if (path.endsWith('.graphql')) {
+                return options.type === 'graphql-schema-first' && options.crud;
+            }
+            if (path.endsWith('controller.ts') ||
+                path.endsWith('.controller.__specFileSuffix__.ts')) {
+                return options.type === 'microservice' || options.type === 'rest';
+            }
+            if (path.endsWith('.gateway.ts') || path.endsWith('.gateway.__specFileSuffix__.ts')) {
+                return options.type === 'ws';
+            }
+            if (path.includes('@ent')) {
+                return options.crud;
+            }
+            return true;
+        }),
+        options.spec
+            ? (0, schematics_1.noop)()
+            : (0, schematics_1.filter)((path) => {
+                const suffix = `.__specFileSuffix__.ts`;
+                return !path.endsWith(suffix);
+            }),
+        (0, schematics_1.template)({
+            ...core_1.strings,
+            ...options,
+            lowercased: (name) => {
+                const classifiedName = (0, strings_1.classify)(name);
+                return (classifiedName.charAt(0).toLowerCase() + classifiedName.slice(1));
+            },
+            singular: (name) => pluralize.singular(name),
+            ent: (name) => name + '.entity',
+        }),
+        (0, schematics_1.move)(options.path),
+    ])(context);
+}
+function addDeclarationToModule(options) {
+    return (tree) => {
+        if (options.skipImport !== undefined && options.skipImport) {
+            return tree;
+        }
+        options.module = new __1.ModuleFinder(tree).find({
+            name: options.name,
+            path: options.path,
+        });
+        if (!options.module) {
+            return tree;
+        }
+        const content = tree.read(options.module).toString();
+        const declarator = new __1.ModuleDeclarator();
+        tree.overwrite(options.module, declarator.declare(content, {
+            ...options,
+            type: 'module',
+        }));
+        return tree;
+    };
+}
+function addMappedTypesDependencyIfApplies(options) {
+    return (host, context) => {
+        try {
+            if (options.type === 'graphql-code-first') {
+                return;
+            }
+            if (options.type === 'rest') {
+                const nodeDependencyRef = (0, dependencies_utils_1.getPackageJsonDependency)(host, '@nestjs/swagger');
+                if (nodeDependencyRef) {
+                    options.isSwaggerInstalled = true;
+                    return;
+                }
+            }
+            const nodeDependencyRef = (0, dependencies_utils_1.getPackageJsonDependency)(host, '@nestjs/mapped-types');
+            if (!nodeDependencyRef) {
+                (0, dependencies_utils_1.addPackageJsonDependency)(host, {
+                    type: dependencies_utils_1.NodeDependencyType.Default,
+                    name: '@nestjs/mapped-types',
+                    version: '*',
+                });
+                context.addTask(new tasks_1.NodePackageInstallTask());
+            }
+        }
+        catch (err) {
+        }
+    };
+}
diff --git a/backend/schematics/resource/schema.json b/backend/schematics/resource/schema.json
new file mode 100644
index 0000000..b52ced3
--- /dev/null
+++ b/backend/schematics/resource/schema.json
@@ -0,0 +1,61 @@
+{
+  "$schema": "http://json-schema.org/schema",
+  "$id": "SchematicsNestResource",
+  "title": "Nest Resource Options Schema",
+  "type": "object",
+  "properties": {
+    "name": {
+      "type": "string",
+      "description": "The name of the resource.",
+      "$default": {
+        "$source": "argv",
+        "index": 0
+      },
+      "x-prompt": "What name would you like to use for this resource (plural, e.g., \"users\")?"
+    },
+    "path": {
+      "type": "string",
+      "format": "path",
+      "description": "The path to create the resource."
+    },
+    "sourceRoot": {
+      "type": "string",
+      "description": "Nest resource source root directory."
+    },
+    "language": {
+      "type": "string",
+      "description": "Application language (ts/js)."
+    },
+    "flat": {
+      "type": "boolean",
+      "default": false,
+      "description": "Flag to indicate if a directory is created."
+    },
+    "spec": {
+      "type": "boolean",
+      "default": true,
+      "description": "Specifies if specs file are generated."
+    },
+    "specFileSuffix": {
+      "type": "string",
+      "default": "spec",
+      "description": "Specifies the file suffix of spec files."
+    },
+    "type": {
+      "type": "string",
+      "description": "The transport layer.",
+      "default": "rest"
+    },
+    "skipImport": {
+      "type": "boolean",
+      "description": "Flag to skip the module import.",
+      "default": false
+    },
+    "crud": {
+      "type": "boolean",
+      "description": "When true, CRUD entry points are generated.",
+      "default": true
+    }
+  },
+  "required": ["name"]
+}
diff --git a/backend/scripts/replaceResourceSchema.sh b/backend/scripts/replaceResourceSchema.sh
new file mode 100644
index 0000000..56e1b09
--- /dev/null
+++ b/backend/scripts/replaceResourceSchema.sh
@@ -0,0 +1,50 @@
+#!/bin/bash
+
+# Define paths
+SOURCE_DIR="schematics/resource"
+TARGET_DIR="node_modules/@nestjs/schematics/dist/lib/resource"
+REPLACEMENT_FLAG="$TARGET_DIR/replaced.txt"
+
+# Get the terminal width
+WIDTH="${COLUMNS:-80}"
+
+# Check if the flag file exists
+if [ -f "$REPLACEMENT_FLAG" ]; then
+  printf "%-${WIDTH}s\n" "" | tr ' ' '='
+
+  # Output the message
+  echo -e "\033[32m\nResource schema already replaced.\n\033[0m"
+
+  printf "%-${WIDTH}s\n" "" | tr ' ' '='
+  exit 0  
+fi
+
+# Check if the source directory exists
+if [ ! -d "$SOURCE_DIR" ]; then
+  echo "Error: Source directory $SOURCE_DIR does not exist."
+  exit 1
+fi
+
+# Check if the target directory exists
+if [ ! -d "$(dirname "$TARGET_DIR")" ]; then
+  echo "Error: Target directory $(dirname "$TARGET_DIR") does not exist."
+  exit 1
+fi
+
+# Remove the target directory and its contents without output
+rm -rf "$TARGET_DIR"
+
+# Copy the source folder to the target location
+cp -r "$SOURCE_DIR" "$TARGET_DIR"
+
+# Create the flag file to indicate the replacement was made
+touch "$REPLACEMENT_FLAG"
+
+printf "%-${WIDTH}s\n" "" | tr ' ' '='
+
+# Output the message
+echo -e "\033[32m\nResource schema replaced successfully.\n\033[0m"
+
+printf "%-${WIDTH}s\n" "" | tr ' ' '='
+
+exit 0
